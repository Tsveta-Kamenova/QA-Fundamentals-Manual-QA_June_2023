{
	"info": {
		"_postman_id": "076d810b-f20a-4056-8734-0f972913f7fe",
		"name": "GitHub",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20079778",
		"_collection_link": "https://blue-station-309787.postman.co/workspace/SofiUniQAFundamentalsJune2023~4d19af7d-98e9-413a-9be4-834e44c8e384/collection/20079778-076d810b-f20a-4056-8734-0f972913f7fe?action=share&creator=20079778&source=collection_link"
	},
	"item": [
		{
			"name": "Labels",
			"item": [
				{
					"name": "Create Label",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an object with message, errors, and documentation_url properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('message', 'errors', 'documentation_url');\r",
									"});\r",
									"\r",
									"pm.test(\"Each error object has resource, code, and field properties\", function () {\r",
									"    pm.response.json().errors.forEach(function (error) {\r",
									"        pm.expect(error).to.be.an('object').that.has.all.keys('resource', 'code', 'field');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"beginners label\",\r\n    \"description\":\"Do it simple\",\r\n    \"color\": \"f29516\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/repos/{{user}}/{{repo}}/labels",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Issue Labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the array has the required properties\", function () {\r",
									"    pm.response.json().forEach(function (label) {\r",
									"        pm.expect(label).to.have.property('id');\r",
									"        pm.expect(label).to.have.property('node_id');\r",
									"        pm.expect(label).to.have.property('url');\r",
									"        pm.expect(label).to.have.property('name');\r",
									"        pm.expect(label).to.have.property('color');\r",
									"        pm.expect(label).to.have.property('default');\r",
									"        pm.expect(label).to.have.property('description');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/repos/{{user}}/{{repo}}/issues/1/labels",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"1",
								"labels"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Issues",
			"item": [
				{
					"name": "Create issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "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",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer 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",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomCatchPhrase}}\",\r\n    \"body\":\"I am having a problem with this.\",\r\n    \"labels\": [\r\n        \"bug\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/repos/{{user}}/{{repo}}/issues",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "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",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer 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",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\":\"Edited2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/repos/{{user}}/{{repo}}/issues/7",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close an issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "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",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer 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",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"state\": \"closed\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/repos/{{user}}/{{repo}}/issues/3",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Issue 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "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",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 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",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/repos/{{user}}/{{repo}}/issues",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Issue 2",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 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",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://api.github.com/repos/Tsveta-Kamenova/02_QA-Fundamentals-and-Manual-Testing---June_2023/issues",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"Tsveta-Kamenova",
								"02_QA-Fundamentals-and-Manual-Testing---June_2023",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-Existing Issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/repos/{{user}}/{{repo}}/issues/4",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Repos",
			"item": [
				{
					"name": "GET Repo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/Tsveta-Kamenova/Postman",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"Tsveta-Kamenova",
								"Postman"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}